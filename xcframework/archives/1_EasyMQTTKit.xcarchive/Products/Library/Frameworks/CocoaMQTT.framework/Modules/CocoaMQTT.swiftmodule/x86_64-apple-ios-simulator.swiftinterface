// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CocoaMQTT
import CocoaAsyncSocket
@_exported import CocoaMQTT
import Dispatch
import Foundation
import Swift
@objc public enum OS : Swift.UInt8, Swift.CustomStringConvertible {
  case qos0 = 0
  case qos1
  case qos2
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.UInt8
  public init?(rawValue: Swift.UInt8)
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum onnState : Swift.UInt8, Swift.CustomStringConvertible {
  case initial = 0
  case connecting
  case connected
  case disconnected
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.UInt8
  public init?(rawValue: Swift.UInt8)
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum onnAck : Swift.UInt8, Swift.CustomStringConvertible {
  case accept = 0
  case unacceptableProtocolVersion
  case identifierRejected
  case serverUnavailable
  case badUsernameOrPassword
  case notAuthorized
  case reserved
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.UInt8
  public init?(rawValue: Swift.UInt8)
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public protocol elegate {
  @objc func mqtt(_ mqtt:  didConnectAck ack: onnAck)
  @objc func mqtt(_ mqtt:  didPublishMessage message: essage, id: Swift.UInt16)
  @objc func mqtt(_ mqtt:  didPublishAck id: Swift.UInt16)
  @objc func mqtt(_ mqtt:  didReceiveMessage message: essage, id: Swift.UInt16)
  @objc func mqtt(_ mqtt:  didSubscribeTopic topics: [Swift.String])
  @objc func mqtt(_ mqtt:  didUnsubscribeTopic topic: Swift.String)
  @objc func mqttDidPing(_ mqtt: 
  @objc func mqttDidReceivePong(_ mqtt: 
  @objc func mqttDidDisconnect(_ mqtt:  withError err: Swift.Error?)
  @objc optional func mqtt(_ mqtt:  didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc optional func mqtt(_ mqtt:  didPublishComplete id: Swift.UInt16)
  @objc optional func mqtt(_ mqtt:  didStateChangeTo state: onnState)
}
@objc public class : ObjectiveC.NSObject {
  weak public var delegate: elegate?
  public var host: Swift.String
  public var port: Swift.UInt16
  public var clientID: Swift.String
  public var username: Swift.String?
  public var password: Swift.String?
  public var cleanSession: Swift.Bool
  public var willMessage: ill?
  public var backgroundOnSocket: Swift.Bool
  public var dispatchQueue: Dispatch.DispatchQueue
  public var connState: onnState {
    get
    set
  }
  public var deliverTimeout: Swift.Double {
    get
    set
  }
  public var messageQueueSize: Swift.UInt {
    get
    set
  }
  public var inflightWindowSize: Swift.UInt {
    get
    set
  }
  public var keepAlive: Swift.UInt16
  public var autoReconnect: Swift.Bool
  public var autoReconnectTimeInterval: Swift.UInt16
  public var maxAutoReconnectTimeInterval: Swift.UInt16
  public var logLevel: oggerLevel {
    get
    set
  }
  public var enableSSL: Swift.Bool
  public var sslSettings: [Swift.String : ObjectiveC.NSObject]?
  public var allowUntrustCACertificate: Swift.Bool
  public var subscriptions: [Swift.String : OS]
  public var didConnectAck: ( onnAck) -> Swift.Void
  public var didPublishMessage: ( essage, Swift.UInt16) -> Swift.Void
  public var didPublishAck: ( Swift.UInt16) -> Swift.Void
  public var didReceiveMessage: ( essage, Swift.UInt16) -> Swift.Void
  public var didSubscribeTopic: ( [Swift.String]) -> Swift.Void
  public var didUnsubscribeTopic: ( Swift.String) -> Swift.Void
  public var didPing: ( -> Swift.Void
  public var didReceivePong: ( -> Swift.Void
  public var didDisconnect: ( Swift.Error?) -> Swift.Void
  public var didReceiveTrust: ( Security.SecTrust, @escaping (Swift.Bool) -> Swift.Void) -> Swift.Void
  public var didCompletePublish: ( Swift.UInt16) -> Swift.Void
  public var didChangeState: ( onnState) -> Swift.Void
  public init(clientID: Swift.String, host: Swift.String = "localhost", port: Swift.UInt16 = 1883)
  @objc deinit
  public func connect() -> Swift.Bool
  public func connect(timeout: Foundation.TimeInterval) -> Swift.Bool
  public func disconnect()
  public func ping()
  @discardableResult
  public func publish(_ topic: Swift.String, withString string: Swift.String, qos: OS = .qos1, retained: Swift.Bool = false, dup: Swift.Bool = false) -> Swift.UInt16
  @discardableResult
  public func publish(_ message: essage) -> Swift.UInt16
  @discardableResult
  public func subscribe(_ topic: Swift.String, qos: OS = .qos1) -> Swift.UInt16
  @discardableResult
  public func subscribe(_ topics: [(Swift.String, OS)]) -> Swift.UInt16
  @discardableResult
  public func unsubscribe(_ topic: Swift.String) -> Swift.UInt16
  @objc override dynamic public init()
}
extension : CocoaAsyncSocket.GCDAsyncSocketDelegate {
  @objc dynamic public func socket(_ sock: CocoaAsyncSocket.GCDAsyncSocket, didConnectToHost host: Swift.String, port: Swift.UInt16)
  @objc dynamic public func socket(_ sock: CocoaAsyncSocket.GCDAsyncSocket, didReceive trust: Security.SecTrust, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc dynamic public func socketDidSecure(_ sock: CocoaAsyncSocket.GCDAsyncSocket)
  @objc dynamic public func socket(_ sock: CocoaAsyncSocket.GCDAsyncSocket, didWriteDataWithTag tag: Swift.Int)
  @objc dynamic public func socket(_ sock: CocoaAsyncSocket.GCDAsyncSocket, didRead data: Foundation.Data, withTag tag: Swift.Int)
  @objc dynamic public func socketDidDisconnect(_ sock: CocoaAsyncSocket.GCDAsyncSocket, withError err: Swift.Error?)
}
public enum oggerLevel : Swift.Int {
  case debug, info, warning, error, off
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class essage : ObjectiveC.NSObject {
  public var qos: OS
  public var dup: Swift.Bool
  public var topic: Swift.String
  public var payload: [Swift.UInt8]
  public var retained: Swift.Bool
  public var string: Swift.String? {
    get
  }
  public init(topic: Swift.String, string: Swift.String, qos: OS = .qos1, retained: Swift.Bool = false, dup: Swift.Bool = false)
  public init(topic: Swift.String, payload: [Swift.UInt8], qos: OS = .qos1, retained: Swift.Bool = false, dup: Swift.Bool = false)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class ill : essage {
  public init(topic: Swift.String, message: Swift.String)
  public init(topic: Swift.String, payload: [Swift.UInt8])
  @objc deinit
  override public init(topic: Swift.String, string: Swift.String, qos: OS = super, retained: Swift.Bool = super, dup: Swift.Bool = super)
  override public init(topic: Swift.String, payload: [Swift.UInt8], qos: OS = super, retained: Swift.Bool = super, dup: Swift.Bool = super)
}
extension OS : Swift.Equatable {}
extension OS : Swift.Hashable {}
extension OS : Swift.RawRepresentable {}
extension onnState : Swift.Equatable {}
extension onnState : Swift.Hashable {}
extension onnState : Swift.RawRepresentable {}
extension onnAck : Swift.Equatable {}
extension onnAck : Swift.Hashable {}
extension onnAck : Swift.RawRepresentable {}
extension oggerLevel : Swift.Equatable {}
extension oggerLevel : Swift.Hashable {}
extension oggerLevel : Swift.RawRepresentable {}
